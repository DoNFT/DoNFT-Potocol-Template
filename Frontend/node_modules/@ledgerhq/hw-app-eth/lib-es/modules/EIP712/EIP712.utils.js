var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { hexBuffer, intAsHexBytes } from "../../utils";
/**
 * @ignore for the README
 *
 * A Map of helpers to get the wanted binary value for
 * each type of array possible in a type definition
 */
var EIP712_ARRAY_TYPE_VALUE;
(function (EIP712_ARRAY_TYPE_VALUE) {
    EIP712_ARRAY_TYPE_VALUE[EIP712_ARRAY_TYPE_VALUE["DYNAMIC"] = 0] = "DYNAMIC";
    EIP712_ARRAY_TYPE_VALUE[EIP712_ARRAY_TYPE_VALUE["FIXED"] = 1] = "FIXED";
})(EIP712_ARRAY_TYPE_VALUE || (EIP712_ARRAY_TYPE_VALUE = {}));
/**
 * @ignore for the README
 *
 * A Map of helpers to get the id and size to return for each
 * type that can be used in EIP712
 */
export var EIP712_TYPE_PROPERTIES = {
    CUSTOM: {
        key: function () { return 0; },
        sizeInBits: function () { return null; }
    },
    INT: {
        key: function () { return 1; },
        sizeInBits: function (size) { return Number(size) / 8; }
    },
    UINT: {
        key: function () { return 2; },
        sizeInBits: function (size) { return Number(size) / 8; }
    },
    ADDRESS: {
        key: function () { return 3; },
        sizeInBits: function () { return null; }
    },
    BOOL: {
        key: function () { return 4; },
        sizeInBits: function () { return null; }
    },
    STRING: {
        key: function () { return 5; },
        sizeInBits: function () { return null; }
    },
    BYTES: {
        key: function (size) { return (typeof size !== "undefined" ? 6 : 7); },
        sizeInBits: function (size) { return (typeof size !== "undefined" ? Number(size) : null); }
    }
};
/**
 * @ignore for the README
 *
 * A Map of encoders to transform a value to formatted buffer
 */
export var EIP712_TYPE_ENCODERS = {
    INT: function (value) {
        var failSafeValue = value !== null && value !== void 0 ? value : 0;
        if (typeof failSafeValue === "string" && (failSafeValue === null || failSafeValue === void 0 ? void 0 : failSafeValue.startsWith("0x"))) {
            return hexBuffer(failSafeValue);
        }
        var valueAsInt = typeof failSafeValue === "string"
            ? parseInt(failSafeValue, 10)
            : failSafeValue;
        var valueAsHexString = valueAsInt.toString(16);
        var paddedHexString = valueAsHexString.length % 2 ? "0" + valueAsHexString : valueAsHexString;
        return Buffer.from(paddedHexString, "hex");
    },
    UINT: function (value) {
        return this.INT(value);
    },
    BOOL: function (value) {
        return this.INT(typeof value === "boolean" ? Number(value) : value);
    },
    ADDRESS: function (value) {
        // Only sending the first 10 bytes (why ?)
        return hexBuffer(value !== null && value !== void 0 ? value : "").slice(0, 20);
    },
    STRING: function (value) {
        return Buffer.from(value !== null && value !== void 0 ? value : "", "utf-8");
    },
    BYTES: function (value, sizeInBits) {
        var failSafeValue = value !== null && value !== void 0 ? value : "";
        // Why slice again ?
        return hexBuffer(failSafeValue).slice(0, sizeInBits !== null && sizeInBits !== void 0 ? sizeInBits : ((failSafeValue === null || failSafeValue === void 0 ? void 0 : failSafeValue.length) - 2) / 2);
    }
};
/**
 * @ignore for the README
 *
 * Helper parsing an EIP712 Type name to return its type and size(s)
 * if it's an array or nested arrays
 *
 * @see EIP712MessageTypes
 *
 * @example "uint8[2][][4]" => [{name: "uint", bits: 8}, [2, null, 4]]
 * @example "bool" => [{name: "bool", bits: null}, []]
 *
 * @param {String} typeName
 * @returns {[{ name: string; bits: Number | null }, Array<Number | null | undefined>]}
 */
export var destructTypeFromString = function (typeName) {
    // Will split "any[][1][10]" in "any", "[][1][10]"
    var splitNameAndArraysRegex = new RegExp(/^([^[\]]*)(\[.*\])*/g);
    // Will match all numbers (or null) inside each array. [0][10][] => [0,10,null]
    var splitArraysRegex = new RegExp(/\[(\d*)\]/g);
    // Will separate the the name from the potential bits allocation. uint8 => [uint,8]
    var splitNameAndNumberRegex = new RegExp(/(\D*)(\d*)/);
    var _a = __read(splitNameAndArraysRegex.exec(typeName || "") || [], 3), type = _a[1], maybeArrays = _a[2];
    var _b = __read(splitNameAndNumberRegex.exec(type || "") || [], 3), name = _b[1], bits = _b[2];
    var typeDescription = name
        ? { name: name, bits: bits ? Number(bits) : undefined }
        : null;
    var arrays = maybeArrays ? __spreadArray([], __read(maybeArrays.matchAll(splitArraysRegex)), false) : [];
    // Parse each size to either a Number or null
    var arraySizes = arrays.map(function (_a) {
        var _b = __read(_a, 2), size = _b[1];
        return (size ? Number(size) : null);
    });
    return [typeDescription, arraySizes];
};
/**
 * @ignore for the README
 *
 * Helper to construct the hexadecimal ByteString for the description
 * of a field in an EIP712 Message
 *
 * @param isArray
 * @param typeSize
 * @param typeValue
 * @returns {String} HexByteString
 */
export var constructTypeDescByteString = function (isArray, typeSize, typeValue) {
    if (typeValue >= 16) {
        throw new Error("Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary" +
            { isArray: isArray, typeSize: typeSize, typeValue: typeValue });
    }
    // 1 is array, 0 is not array
    var isArrayBit = isArray ? "1" : "0";
    // 1 has type size, 0 has no type size
    var hasTypeSize = typeof typeSize === "number" ? "1" : "0";
    // 2 unused bits
    var unusedBits = "00";
    // type key as 4 bits
    var typeValueBits = typeValue.toString(2).padStart(4, "0");
    return intAsHexBytes(parseInt(isArrayBit + hasTypeSize + unusedBits + typeValueBits, 2), 1);
};
/**
 * @ignore for the README
 *
 * Helper to create the buffer to describe an EIP712 types' entry structure
 *
 * @param {EIP712MessageTypesEntry} entry
 * @returns {Buffer}
 */
export var makeTypeEntryStructBuffer = function (_a) {
    var _b, _c, _d, _e;
    var name = _a.name, type = _a.type;
    var _f = __read(destructTypeFromString(type), 2), typeDescription = _f[0], arrSizes = _f[1];
    var isTypeAnArray = Boolean(arrSizes.length);
    var typeProperties = EIP712_TYPE_PROPERTIES[((_b = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) === null || _b === void 0 ? void 0 : _b.toUpperCase()) || ""] ||
        EIP712_TYPE_PROPERTIES.CUSTOM;
    var typeKey = typeProperties.key(typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.bits);
    var typeSizeInBits = typeProperties.sizeInBits(typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.bits);
    var typeDescData = constructTypeDescByteString(isTypeAnArray, typeSizeInBits, typeKey);
    var bufferArray = [Buffer.from(typeDescData, "hex")];
    if (typeProperties === EIP712_TYPE_PROPERTIES.CUSTOM) {
        bufferArray.push(Buffer.from(intAsHexBytes((_d = (_c = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0, 1), "hex"));
        bufferArray.push(Buffer.from((_e = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) !== null && _e !== void 0 ? _e : "", "utf-8"));
    }
    if (typeof typeSizeInBits === "number") {
        bufferArray.push(Buffer.from(intAsHexBytes(typeSizeInBits, 1), "hex"));
    }
    if (isTypeAnArray) {
        bufferArray.push(Buffer.from(intAsHexBytes(arrSizes.length, 1), "hex"));
        arrSizes.forEach(function (size) {
            if (typeof size === "number") {
                bufferArray.push(Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.FIXED, 1), "hex"), Buffer.from(intAsHexBytes(size, 1), "hex"));
            }
            else {
                bufferArray.push(Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.DYNAMIC, 1), "hex"));
            }
        });
    }
    bufferArray.push(Buffer.from(intAsHexBytes(name.length, 1), "hex"), Buffer.from(name, "utf-8"));
    return Buffer.concat(bufferArray);
};
//# sourceMappingURL=EIP712.utils.js.map